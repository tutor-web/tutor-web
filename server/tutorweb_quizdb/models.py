import sqlalchemy as sa
from sqlalchemy.orm import relationship, synonym
from sqlalchemy.ext.declarative import declared_attr
from pluserable.data.models import (
    GroupBase, UserBase)
from pluserable.data.sqlalchemy.models import (
    ActivationMixin)

from tutorweb_quizdb import Base

ACTIVE_HOST_DOMAIN = 'ut'


class User(UserBase, Base):
    __tablename__ = 'user'
    __table_args__ = dict(
        extend_existing=True,
    )

    @classmethod
    def active_host_domain(cls):
        """
        Return the host_domain currently in use
        """
        return ACTIVE_HOST_DOMAIN

    host_domain = sa.Column(
        'hostdomain',
        sa.UnicodeText,
        default=lambda: ACTIVE_HOST_DOMAIN,
        primary_key=True)
    id = sa.Column(
        'user_id',
        sa.Integer,
        autoincrement=True,
        primary_key=True)

    user_name = sa.Column("user_name", sa.UnicodeText)
    username = synonym('user_name')
    _password = sa.Column('pw_hash', sa.Unicode(256), nullable=False)

    groups = relationship("Group", secondary='user_group')

    # Ignore any csrf_token passed through
    @property
    def csrf_token(self):
        pass

    @csrf_token.setter
    def csrf_token(self, value):
        pass


class Group(GroupBase, Base):
    __tablename__ = 'group'
    __table_args__ = dict(
        extend_existing=True,
    )

    @declared_attr
    def id(cls):
        """Autogenerated ID"""
        return sa.Column(
            'group_id',
            sa.Integer,
            autoincrement=True,
            primary_key=True)


class UserGroup(Base):
    __tablename__ = 'user_group'

    @declared_attr
    def id(cls):
        """Autogenerated ID"""
        return sa.Column(
            'user_group_id',
            sa.Integer,
            autoincrement=True,
            primary_key=True)

    host_domain = sa.Column(
        'hostdomain',
        sa.UnicodeText,
        sa.ForeignKey('host.hostdomain'))

    user_id = sa.Column(
        'user_id',
        sa.Integer)

    group_id = sa.Column(
        'group_id',
        sa.Integer,
        sa.ForeignKey('group.group_id')
    )

    __table_args__ = (
        sa.ForeignKeyConstraint(
            [host_domain, user_id],
            [User.host_domain, User.id],
        ),
        dict(
            extend_existing=True,
        ),
    )


class Activation(ActivationMixin, Base):
    __tablename__ = 'activation'
    __table_args__ = dict(
        extend_existing=True,
    )

    @declared_attr
    def id(cls):
        """Autogenerated ID"""
        return sa.Column(
            'activation_id',
            sa.Integer,
            autoincrement=True,
            primary_key=True)
