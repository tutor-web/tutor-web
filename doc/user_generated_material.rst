User generated material
***********************

A stage in a Tutor-web lecture can, as well as offering drill items, offer the
chance to write material to be inserted into Tutor-web.

Configuration
=============

For enable writing of questions/examples, you need a stage that is configured
to find material with the tag ``type.template``, for instance::

    "material_tags": [
        "type.template",
        "outputtype.question",
        {"path": "math.612.0"},
    ]

...will look for templates that output questions within the lecture. There will
also need to be a matching template in the material bank.

A template is defined with a very similar R script to a question, except the
filename ends with ".t.R", e.g. "comp.crypto251.0/lec03500/example.t.R". Here
is a simple example of an example template::

    # TW:TAGS=outputtype.example,path.comp.crypto251.0.lec03500
    question <- function(permutation, data_frames) {
        return(list(
            content = '
                <p class="hints">Write an example or proof for this lecture</p>
                <textarea name="text" class="preview-as-rst"></textarea>
            ',
            output_tags = c('type.example', 'path.comp.crypto251.0.lec03500'),
            correct = list('_start_with' = NULL, 'text' = list(nonempty = TRUE))
        ))
    }

Things to note are:-

* ``output_tags`` defines what tags any examples generated by answering this form would have
* ``correct`` has 2 parts:
  * ``_start_with``: Which says that correct should be NULL or False, never True - this will happen as a result of gradings
  * ``text``: Which is defined to be any nonempty value (i.e. an empty text field would mean the answer is False).

Writing & reviewing material
============================

When a student enters a stage that has the ``type.template`` tag set, they are
shown any material they have written so far, and they can write new material.

Writing material will offer the form from the template, the contents of which
will be saved in the ``student_answer`` column in the ``answer`` table.

Reviewing material will look in the answer table and find work that hasn't
been marked correct/incorrect, and render it to be answered. After answering a
question, a questionnaire getting students to grade the material is shown (this
questionnaire is currently defined in
`usergenerated.py <../server/tutorweb_quizdb/material/renderer/usergenerated.py>`_.
Regardless of your selections, a there are no grade or SMLY rewards for
reviewing.

An overall mark for each user-generated-material is worked out by, for each
review summing responses to get an overall score, then taking the mean of these
overall scores across all reviews.

If this goes over/under the maximum/minimum boundaries, then the
user-generated-material is considered correct or incorrect respectively. Either
way, once we have reached a decision on the material being correct or not, no
other students will review it. If the material was considered correct, then award
``award_ugmaterial_correct`` Milli-SMLY to the user.

There's a number of "ugreview" settings that affect this process, see 
`Tutor-web settings <settings.rst>`_ for details.

Vetted reviewers
================

Vetted reviewers are the same as regular students but are part of the "vetted"
group for that lecture, e.g. ``vetted.comp.crypto251.0``. Their aim is to
choose material that should be added back into the main material bank. This
results in a few changes to the system.

Unlike regular users, vetted reviewers will review "correct"
user-generated-material as well as undecided material. If there is any, then
the "correct" material will be reviewed first, since in theory it should be
reasonable quality.

Vetted reviewers will always have to answer `an extra review
question <../server/tutorweb_quizdb/stage/material.py>`_. This allows them to
signal this material should be added to the main material bank, and
`award_ugmaterial_accepted <settings.rst>`_ given to the author of the question.
